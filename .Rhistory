modularity(wc)
wc <- label.propagation.community(CIS_graph_italian)
modularity(wc)
wc <- cluster_louvain(CIS_graph_italian)
modularity(wc)
greedy.comm <- fastgreedy.community(CIS_graph_italian)#125 communities
##################################
# Girvan-newman algorithm
gn.comm <- cluster_edge_betweenness(CIS_graph)
#Attach community labels as vertex attribute
V(CIS_graph)$GN.cluster <- membership(gn.comm)
#We can see that it's preety messy and difficult to recognise labels.
#We would like to extract the Giant Component and analyse it more.
GiantComponent <- which(V(CIS_graph)$GN.cluster==1)
# Extract subgraph
GiantComponent <- induced.subgraph(graph=CIS_graph,vids=GiantComponent)
#Attach community labels as vertex attribute
V(GiantComponent)$GN.cluster <- membership(gn.comm.giant)
#Compute the intra-cluster density
#The densities  of communities number 6, 10,8 and 1 are the biggest
sapply(unique(membership(gn.comm)), function(gg) {
subg1<-induced.subgraph(CIS_graph, which(membership(gn.comm)==gg)) #membership id differs for each cluster
ecount(subg1)/ecount(CIS_graph)
})
#
V(CIS_graph)$Author[V(CIS_graph)$GN.cluster==10]
#Get all combinations of communities and get inter-cluster edges
#We can observe links between the all communities.
#For example, we are interested into community 1 as its the biggest component.
#The community 1 is connected to community number 5 via 4 edges,community 20 via 4 edges, and community  27 via 5 edges,etc.
cs <- data.frame(combn(unique(membership(gn.comm)),2))
#Evaluating cluster homogeneity
#We would like to understand if nodes in one communitits are belong to one Author Type.
#Gini index (complementary).
gini <- function(x){
f <- table(x)/length(x)
sum(f^2)
}
#The gini index on the cluster 1 is equal to 0.50 and it tells that half is belong to one type, on cluster 6:0.61,etc
gini(V(CIS_graph)$Author.Type[V(CIS_graph)$GN.cluster==10])
#It could be interesting to check the gini index on the Sector attribute, however as we have attributes just for some researchers, it gives us the small number.
gini(V(CIS_graph)$Sector[V(CIS_graph)$GN.cluster==1])
#Attach community labels as vertex attribute
V(CIS_graph)$L.cluster <- membership(low.comm)
#The 11th community has the maximum density over the dataset
sapply(unique(membership(low.comm)), function(gg) {
subg1<-induced.subgraph(CIS_graph, which(membership(low.comm)==gg)) #membership id differs for each cluster
ecount(subg1)/ecount(CIS_graph)
})
#Evaluating cluster homogeneity
#We would like to understand if nodes in one communitits are belong to one Author Type.
#Gini index (complementary).
gini <- function(x){
f <- table(x)/length(x)
sum(f^2)
}
#The gini index on the cluster 101 is equal to 0.50 and it tells that half is belong to one type.
#Hovewer, on the community 11 GINI index is 0.71.
gini(V(CIS_graph)$Author.Type[V(CIS_graph)$L.cluster==101])
#Plot
colors <- rainbow(max(membership(low.comm)))
#We can see that it's preety messy and difficult to recognise labels.
#We would like to extract the Giant Component and analyse it more.
GiantComponent <- which(V(CIS_graph)$L.cluster==101)
# Extract subgraph
GiantComponent <- induced.subgraph(graph=CIS_graph,vids=GiantComponent)
#Attach community labels as vertex attribute
V(GiantComponent)$L.cluster <- membership(low.comm.giant)
#The 5th community has the maximum density over the dataset
sapply(unique(membership(low.comm.giant)), function(gg) {
subg1<-induced.subgraph(GiantComponent, which(membership(low.comm.giant)==gg)) #membership id differs for each cluster
ecount(subg1)/ecount(GiantComponent)
})
# Add edge attribute id values
E(CIS_graph)$id <- seq(ecount(CIS_graph))
#Analyse of Italian Researchers Graph
my_color <- coul[as.numeric(as.factor(V(CIS_graph_italian)$Sector))]
#Title
title(main="Current Index to Statistics Database Network", sub="Italian Researchers", cex.main=1)
#Mean distance
mean_distance(CIS_graph_italian)#average path length = the average distance between all pairs of nodes in the network
#Here we can see that in the longest shortest path of the graph are 19 nodes are included.
V(CIS_graph_italian)$Author[diameter]
#Title
title(main="Current Index to Statistics Database Network", sub="Italian Researchers", cex.main=1)
###Community detection in
#The fast greedy community detection algorithm shown the best score
wc <- fastgreedy.community(CIS_graph_italian)
greedy.comm <- fastgreedy.community(CIS_graph_italian)#125 communities
unique(greedy.comm$membership)
table(greedy.comm$membership)#10th community is the largest, it contains 34 nodes
#Attach community labels as vertex attribute
V(CIS_graph_italian)$G.cluster <- membership(greedy.comm)
V(CIS_graph_italian)$Author[V(CIS_graph_italian)$G.cluster==10]
#The 15th community has the maximum density over the dataset. 0.043893130 is the density of the largest community
sapply(unique(membership(greedy.comm)), function(gg) {
subg1<-induced.subgraph(CIS_graph_italian, which(membership(greedy.comm)==gg)) #membership id differs for each cluster
ecount(subg1)/ecount(CIS_graph_italian)
})
#Evaluating cluster homogeneity
#We would like to understand if nodes in one communitits are belong to one Author Type.
#Gini index (complementary).
gini <- function(x){
f <- table(x)/length(x)
sum(f^2)
}
vertex.attributes(CIS_graph_italian)
#We would like to check if the community detection shows the same separation as the Sectors are presented
#On the ;argest community 10 the score isw equal to 0.78
gini(V(CIS_graph_italian)$Sector[V(CIS_graph_italian)$G.cluster==10])
#Plot
colors <- rainbow(max(membership(greedy.comm)))
plot(greedy.comm, CIS_graph_italian,vertex.size = 4, vertex.color=colors[membership(greedy.comm)], vertex.label = NA, edge.width = 1)
title(main="CIS Network - Italian Authors Communitites",sub="Fast Greedy Algorithm", cex.main=1)
set.seed(1234)
colors <- rainbow(max(membership(cww)))
par(mar=c(0,0,2,0))
data(DHHS)
iDHHS<-asIgraph(DHHS)
iDHHS
cww <- cluster_walktrap(iDHHS)
modularity(cww)
membership(cww)
table(V(iDHHS)$agency,membership(cww))
class(cww)
rescale <- function(nchar,low,high) {
min_d <- min(nchar)
max_d <- max(nchar)
rscl <- ((high-low)*(nchar-min_d))/(max_d-min_d)+low
rscl
}
set.seed(1234)
colors <- rainbow(max(membership(cww)))
par(mar=c(0,0,2,0))
plot(cww, iDHHS,
vertex.size = 6,
vertex.color=colors[membership(cww)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
plot(cww, iDHHS)
plot(cww,iDHHS,,vertex.size = 4, vertex.color=colors[membership(cww)], vertex.label = NA, edge.width = 1)
plot(cww,iDHHS,vertex.size = 4, vertex.color=colors[membership(cww)], vertex.label = NA, edge.width = 1)
plot(cww, iDHHS,
vertex.size = 6,
vertex.color=colors[membership(cww)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
plot(cww, iDHHS,
vertex.size = 6,
vertex.color=colors[membership(cww)],
vertex.label = NA, edge.width = 2,edge.color="gray60")
plot(cww, iDHHS,
vertex.size = 6,
vertex.color=colors[membership(cww)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
modules <- decompose.graph(PRIN_graph)
library("igraphdata")
library("igraph")
library("network")
library("statnet")
library("intergraph")
library("dplyr")
library("stringr")
library("RColorBrewer")
library("sand")
library("stringr")
library("ggplot2")
nodePRIN <- data.frame(CIS)
#nodePRIN
relationsp <- as.matrix(CISFull)
#graph_from_adjacency_matrix is a flexible function for creating igraph graphs from adjacency matrices.
PRIN_graph = graph_from_adjacency_matrix(relationsp, mode="undirected",weighted = TRUE)
PRIN_graph
allcodes_vec <- as.vector(V(PRIN_graph)$name)#vector of all names of nodes in the PrinFull
External_authors<-str_subset(allcodes_vec, "A")
#External_authors
#Also we subset all codes that start from S-Italian authors from matrix with all names of nodes in the CISFull and save them as InternalCodes
InternalCodes<-str_subset(allcodes_vec, "S")
#Here we found what authors are representes in both tables CIS and CISFull and we will assign to them all given attributes.
Italiancodes_vec <- as.vector(nodePRIN$Code)#choose all codes from CIS dataframe-table of Italian statisticians.
Italian_authors <- intersect(InternalCodes,Italiancodes_vec)#intersection of Italian authors code from the previous table with the full matrix of egdes between codes.
#Here we found what authors are representes in both tables CIS and CISFull and we will assign to them all given attributes.
Italiancodes_vec <- as.vector(nodePRIN$Code)#choose all codes from CIS dataframe-table of Italian statisticians.
Italian_authors <- intersect(InternalCodes,Italiancodes_vec)#intersection of Italian authors code from the previous table with the full matrix of egdes between codes.
#Italian_authors
#Here we found what authors are presented in relationship table CISFull, but not in attributes table CIS with codes similar to Italian statistitians, starting from S.
Unknown_italian_authors <- setdiff(InternalCodes,Italiancodes_vec)
#Set of nodes attributes - Author names
vertex_attr(PRIN_graph, "Author",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% Italian_authors]) <- as.character(nodePRIN$AUTHOR)
vertex_attr(PRIN_graph, "Author",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% External_authors]) <- "External"
vertex_attr(PRIN_graph, "Author",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% Unknown_italian_authors]) <- "Unknown"
#Set other attributes
vertex_attr(PRIN_graph, "Sector",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% Italian_authors]) <- as.character(nodePRIN$Sector)
vertex_attr(PRIN_graph, "H.Index",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% Italian_authors]) <- nodePRIN$H.Index
vertex_attr(PRIN_graph, "NumDocs",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% Italian_authors]) <- nodePRIN$NumDocs
vertex_attr(PRIN_graph, "References",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% Italian_authors]) <- nodePRIN$References
vertex_attr(PRIN_graph, "Citations",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% Italian_authors]) <- nodePRIN$Citations
#set additional attribute type of authors-foreign/italian for futher plotting
vertex_attr(PRIN_graph, "Author.Type",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% InternalCodes]) <- "Italian_researchers"
vertex_attr(PRIN_graph, "Author.Type",index=V(PRIN_graph)$name[V(PRIN_graph)$name %in% External_authors]) <- "Foreign_researchers"
vertex.attributes(PRIN_graph)
summary(PRIN_graph)
#transforming from Igraph to Network
PRIN_NET<-asNetwork(PRIN_graph)
PRIN_NET
#visualizing the Large network and as we can see the contrality is not in the center of graph.
my_pal <- brewer.pal(11,"Set3")
rolecat <- as.factor(get.vertex.attribute(PRIN_graph,"Author.Type"))
par(mar=c(0,0,2,0))
sidenum <- 3:7
gplot(PRIN_NET,vertex.cex=2.4,
edge.col="grey80",edge.lwd=0.02,
thresh=0.01,jitter=TRUE,
vertex.sides=sidenum[rolecat]
,cex.main=1.5,layout.fruchterman.reingold,
vertex.col=my_pal[rolecat],main="Current Index to Statistics Database Network-CisFull")
#anather way of ploting
my_pal <- brewer.pal(11,"Set3")
rolecat <- as.factor(get.vertex.attribute(PRIN_graph,"Author.Type"))
#deg <- degree(PRIN_NET,rescale=TRUE)
#V(PRIN_graph)$size <- deg*1500
V(PRIN_graph)$color <-my_pal[rolecat]
l=layout.kamada.kawai(PRIN_graph)
title(main="Large Graph Layout", cex.main=1)
table(degree(PRIN_NET,gmode="graph")) #as we can see here, it has 60 isolated
my_pal <- brewer.pal(11,"Set3")
rolecat <- my_pal[as.numeric(as.factor(V(PRIN_graph)$Author.Type))]
CIS_CI<- igraph::degree(PRIN_graph)
table(CIS_CI)
sorted<-sort(CIS_CI, decreasing = FALSE)
max_citation<-sorted[c(1519,1520,1521,1522,1523,1524,1525)] #HIGHEST degree that I used to plot in the next code.
max_citation
V(PRIN_graph)$Author[CIS_CI %in% max_citation]#authors that have the most degrees
#Plot the graph with node size equal to node degree
V(PRIN_graph)$size <- CIS_CI*0.5
legend("bottomleft", legend=levels(as.factor(V(PRIN_graph)$Author.Type)),
col = my_pal, bty = 'n', pch=20 , pt.cex = 3, cex = 1, text.col='black' ,
horiz = FALSE)
title(main="CIS Network-high degree centrality", cex.main=2)
Y2<-asIgraph(y)
vertex.attributes(Y2)
ci
legend("bottomleft",legend=c("Italian_researchers","Foreign_researchers"),
col=my_pal[rolecat],pch=19,pt.cex=1.5,bty="n",
title="Authors")
#anather way of plotting
par(mar=c(0,0,2,0))
plot(PRIN_graph,edge.color="gray60"
,pad=0.4,vertex.label=NA,layout=l,vertex.size=2)
legend("bottomleft",legend=c("Italian_researchers","Foreign_researchers"),
col=my_pal[rolecat],pch=19,pt.cex=1.5,bty="n",
title="Authors")
#IN WHICH SECTOR DO AUTHORS WITH HIGH CITATION BELONG? they are mostly belong to sector 1.
table(V(PRIN_graph)$Author[CIS_CI %in% max_citation],V(PRIN_graph)$Sector[CIS_CI%in% max_citation])
plot(PRIN_graph,layout=layout.random,
vertex.frame.color=NA,vertex.label.color="black",
vertex.color= rolecat,vertex.label = ifelse(CIS_CI %in% max_citation ,
V(PRIN_graph)$Author, NA),vertex.label.dist=1)
legend("right", legend=as.character(V(PRIN_graph)$Author[CIS_CI %in% max_citation]),
bty = 'n', pch=NA_integer_ , pt.cex = 6, cex = 1, text.col='black' ,
horiz = FALSE)
#This vertix has the most highest degree with degree 38
y <- get.inducedSubgraph(PRIN_NET,
which(degree(PRIN_graph)== "38"))
#lets go through citation
ci<- sort(unique(V(PRIN_graph)$Citations))
#c<-sort(table(V(PRIN_graph)$Citations))
high_cit<-ci[119:145] # citation that I used to plot in the next code.
high_cit
modules <- decompose.graph(PRIN_graph)
out <- modules[order(sapply(modules, ecount), decreasing=T)]
modules
out <- modules[order(sapply(modules, ecount), decreasing=T)]
out
length(out)
out
vertexes <- character()
data_frames <- list()
vertexes <- character()
data_frames <- list()
for(i in 2:length(out)) {
vertexes[i] <- list(vertex.attributes(out[[i]])$name)
data_frames[[i]] <- get.data.frame(out[[i]])
}
vertexes
data_frames
out
vertexes
data_frames
sub_nodes = unlist(vertexes)
sub_nodes
for(i in 2:length(out)) {
vertexes[i] <- list(vertex.attributes(out[[i]])$name)
data_frames[[i]] <- get.data.frame(out[[i]])
}
subv <- sub_nodes
subv
g3 <- induced.subgraph(graph=PRIN_graph,vids=subv)
g3
g4<-asNetwork(g3)
g4
#I can calculate the betweenness of this  graph and display the outcome:
wc <- edge.betweenness.community(g3, weights = NULL
,directed = FALSE,bridges = TRUE)
## Let's separate the 113 small components.
plot(wc, g3, vertex.size=4,
edge.color="gray80",
vertex.label=NA)
title(main="113 small CIS Network.", cex.main=2)
#visulize giant component
vertexes <- character()
data_frames <- list()
for(i in 1:1) {
vertexes[i] <- list(vertex.attributes(out[[i]])$name)
data_frames[[i]] <- get.data.frame(out[[i]])
}
vertexes
sub_nodes = unlist(vertexes)
subv <- sub_nodes
LargeComp <- induced.subgraph(graph=PRIN_graph,vids=subv)
g6<-asNetwork(LargeComp)
rescale <- function(nchar,low,high) {
min_d <- min(nchar)
max_d <- max(nchar)
rscl <- ((high-low)*(nchar-min_d))/(max_d-min_d)+low
rscl
}
#There are several community detection algorithm.
#The best result is given by Louvain and  Girvan-newman(edge betweeness) algorithms.
# I will implement Girvan-newman(edge betweeness) algorithms.
wc <- fastgreedy.community(LargeComp)
modularity(wc)
wc <- edge.betweenness.community(LargeComp)
modularity(wc)
wc <- leading.eigenvector.community(LargeComp)
modularity(wc)
wc <- label.propagation.community(LargeComp)
modularity(wc)
wc <- cluster_louvain(LargeComp)
modularity(wc)
max(LC.gn.comm$membership)
LC.gn.comm <- edge.betweenness.community(LargeComp, weights = NULL
,directed = FALSE,bridges = TRUE)
max(LC.gn.comm$membership)
#we can position vertices in the same community group together and
#make different communities stay further apart.
LC_Grouped = LargeComp
E(LC_Grouped)$weight = 1
for(i in unique(membership(LC.gn.comm))) {
GroupV = which(membership(LC.gn.comm) == i)
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 2), attr=list(weight=6))
}
set.seed(1234)
LO = layout_with_fr(LC_Grouped)
colors <- rainbow(max(membership(LC.gn.comm)))
par(mar=c(0,0,2,0))
plot(LC.gn.comm, LargeComp, layout=LO,
vertex.size = 6,
vertex.color=colors[membership(LC.gn.comm)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
title(main="Giant component CIS Network.",sub="Girvan-Newman Algorithm", cex.main=2)
out
modules <- decompose.graph(DHHS)
modules <- decompose.graph(iDHHS)
modules
modules <- decompose.graph(iDHHS)
modules
out <- modules[order(sapply(modules, ecount), decreasing=T)]
out
length(out)
out
vertexes[i] <- list(vertex.attributes(out[[i]])$name)
vertexes[i] <- list(vertex.attributes(out[[1]])$name)
vertexes
vertexes <- character()
data_frames <- list()
for(i in 1:length(out)) {
vertexes[i] <- list(vertex.attributes(out[[i]])$name)
data_frames[[i]] <- get.data.frame(out[[i]])
}
vertexes
iDHHS
vertexes[i] <- list(vertex.attributes(out[[i]])$vertex.names)
vertexes
sub_nodes = unlist(vertexes)
sub_nodes
subv <- sub_nodes
g3 <- induced.subgraph(graph=PRIN_graph,vids=subv)
g3 <- induced.subgraph(graph=iDHHS,vids=subv)
#g3 <- induced.subgraph(graph=iDHHS,vids=subv)
g4<-asNetwork(sub_nodes)
sub_nodes = unlist(vertexes)
subv <- sub_nodes
#g3 <- induced.subgraph(graph=iDHHS,vids=subv)
g4<-asNetwork(sub_nodes)
sub_nodes
subv
g3 <- induced.subgraph(graph=iDHHS,vids=subv)
rescale <- function(nchar,low,high) {
min_d <- min(nchar)
max_d <- max(nchar)
rscl <- ((high-low)*(nchar-min_d))/(max_d-min_d)+low
rscl
}
## Let's separate the 113 small components.
plot(wc, g3, vertex.size=4,
edge.color="gray80",
vertex.label=NA)
## Let's separate the 113 small components.
plot(wc, g3, vertex.size=4,
edge.color="gray80",
vertex.label=NA)
out
hh <- edge.betweenness.community(iDHHS, weights = NULL
,directed = FALSE,bridges = TRUE)
max(hh$membership)
set.seed(1234)
#we can position vertices in the same community group together and
#make different communities stay further apart.
LC_Grouped = iDHHS
E(LC_Grouped)$weight = 1
for(i in unique(membership(LC.gn.comm))) {
GroupV = which(membership(LC.gn.comm) == i)
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 2), attr=list(weight=6))
}
for(i in unique(membership(hh))) {
GroupV = which(membership(hh) == i)
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 2), attr=list(weight=6))
}
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 2), attr=list(weight=6))
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 1), attr=list(weight=6))
max(hh$membership)
#we can position vertices in the same community group together and
#make different communities stay further apart.
LC_Grouped = iDHHS
E(LC_Grouped)$weight = 1
unique(membership(hh)
for(i in unique(membership(hh))) {
GroupV = which(membership(hh) == i)
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 2), attr=list(weight=6))
}
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 2), attr=list(weight=6))}
GroupV = which(membership(hh) == i)
for(i in unique(membership(hh))) {
GroupV = which(membership(hh) == i)
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 2), attr=list(weight=6))
}
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 1), attr=list(weight=6))
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 3), attr=list(weight=6))
LC_Grouped = add_edges(LC_Grouped, combn(GroupV, 2), attr=list(weight=6))
set.seed(1234)
LO = layout_with_fr(LC_Grouped)
colors <- rainbow(max(membership(LC.gn.comm)))
par(mar=c(0,0,2,0))
plot(hh, iDHHS, layout=LO,
vertex.size = 6,
vertex.color=colors[membership(LC.gn.comm)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
title(main="Giant component CIS Network.",sub="Girvan-Newman Algorithm", cex.main=2)
title(main="Giant component Network.", cex.main=2)
plot(hh, iDHHS, layout=LO,
vertex.size = 6,
vertex.color=colors[membership(LC.gn.comm)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
title(main="Giant component Network.", cex.main=2)
#we can position vertices in the same community group together and
#make different communities stay further apart.
E(iDHHS)$weight = 1
for(i in unique(membership(hh))) {
GroupV = which(membership(hh) == i)
iDHHS = add_edges(iDHHS, combn(GroupV, 2), attr=list(weight=6))
}
set.seed(1234)
LO = layout_with_fr(LC_Grouped)
colors <- rainbow(max(membership(LC.gn.comm)))
par(mar=c(0,0,2,0))
plot(hh, iDHHS, layout=LO,
vertex.size = 6,
vertex.color=colors[membership(LC.gn.comm)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
set.seed(1234)
LO = layout_with_fr(iDHHS)
colors <- rainbow(max(membership(hh)))
par(mar=c(0,0,2,0))
plot(hh, iDHHS, layout=LO,
vertex.size = 6,
vertex.color=colors[membership(hh)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
title(main="Giant component Network.", cex.main=2)
#we can position vertices in the same community group together and
#make different communities stay further apart.
E(iDHHS)$weight = 1
for(i in unique(membership(hh))) {
GroupV = which(membership(hh) == i)
iDHHS = add_edges(iDHHS, combn(GroupV, 2), attr=list(weight=6))
}
set.seed(1234)
LO = layout_with_fr(iDHHS)
colors <- rainbow(max(membership(hh)))
par(mar=c(0,0,2,0))
plot(hh, iDHHS, layout=LO,
vertex.size = 6,
vertex.color=colors[membership(hh)],
vertex.label = NA, edge.width = 1,edge.color="gray60")
title(main="Giant component Network.", cex.main=2)
combn(letters[1:4], 2)
combn(letters[1:4], 4)
combn(letters[1:4], 2)
combn(letters[1:4], 1)
combn(letters[1:4], 6)
combn(letters[1:4], 3)
combn(letters[1:4], 4)
combn(letters[1:4], 2)
combn(letters[1:4], 1)
